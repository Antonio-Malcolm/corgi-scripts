#!/bin/sh

# Copyright 2015 Antonio Malcolm
#
# This file is part of Corgi Scripts.
#   
# Corgi Scripts is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# corgi-openbox-menus-networkmanager - Generates an Openbox Pipemenu for managing network devices and connections, using NetworkManager as a backend.
#
# v2015.05.18
#
# Authored by Antonio Malcolm
#
# Requires: corgi-openbox-menus-networkmanager.shlib
# Requires: corgi-openbox-menus-core.shlib (normally provided by corgi-openbox-menus-networkmanager.shlib)
# Requires: corgi-scripts-core.shlib (normally provided by corgi-openbox-menus-networkmanager.shlib)
# Requires: NetworkManager

exitStatus=1
currentDirectory="`dirname "$0"`"
currentDirectory="`cd "$currentDirectory" ; pwd -P `"
parentDirectory="`dirname $currentDirectory`"
corgiObMenusNmLib="$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-networkmanager.shlib"

if [ ! -e "$corgiObMenusNmLib" ]
then
  logger "ERROR (corgi-openbox-menu-networkmanager): The Corgi Openbox NetworkManager Menu library is not present. Exiting..."
  echo "ERROR (corgi-openbox-menu-networkmanager): The Corgi Openbox NetworkManager Menu library is not present. Exiting..."
  exit $exitStatus
fi

. "$corgiObMenusNmLib"

pipeMenu=''
pipeMenuContent=''

if ! command -v nmcli > /dev/null
then
  logger "ERROR (corgi-openbox-menu-networkmanager): NetowrkManager CLI not found. Please install NetworkManager"
  pipeMenuContent=`corgiObMenuItem "label:This requires NetworkManager..."`
else

  connectionStatusAll="`nmcli networking`"
  connectionStatusWifi="`nmcli radio wifi`"

  if [ -z "$connectionStatusAll" ]
  then
    pipeMenuContent="`corgiObMenuItem "label:Can't obtain network connection status!"`"
  else

    shouldAppendConnectionProfiles=false
    shouldAppendWifiNetworks=false

    if [ "$connectionStatusAll" = 'disabled' ]
    then
      toggleNetworkCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-networkmanager.shlib\" ; toggleNetworkingState on'"
      pipeMenuContent="`corgiObMenuItem "label:Enable All" "action:Execute" "command:$toggleNetworkCommand"`"
    else

      shouldAppendConnectionProfiles=true
      toggleNetworkCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-networkmanager.shlib\" ; toggleNetworkingState off'"
      pipeMenuContent="`corgiObMenuItem "label:Disable All" "action:Execute" "command:$toggleNetworkCommand"`"

      if [ -z "$connectionStatusWifi" ]
      then
        pipeMenuContent="$pipeMenuContent`corgiMenuObItem "label:Can't obtain wireless status!"`"
      elif [ "$connectionStatusWifi" = 'disabled' ]
      then
        toggleWifiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-networkmanager.shlib\" ; toggleWifiState on'"
        pipeMenuContent="$pipeMenuContent`corgiObMenuItem "label:Enable Wireless" "action:Execute" "command:$toggleWifiCommand"`"
      else
        shouldAppendWifiNetworks=true
        toggleWifiCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-networkmanager.shlib\" ; toggleWifiState off'"
        pipeMenuContent="$pipeMenuContent`corgiObMenuItem "label:Disable Wireless" "action:Execute" "command:$toggleWifiCommand"`"
      fi    

    fi

    menuId="`corgiMakeIdString "corgi-menus-networkmanager-device-profiles-"`"
    devicesMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-networkmanager.shlib&quot; ; buildDeviceProfilesMenu'"
    pipeMenuContent="$pipeMenuContent`corgiObMenu "id:$menuId" "label:Device Profiles" "execute:$devicesMenuCommand"`"

    if $shouldAppendConnectionProfiles
    then
      menuId="`corgiMakeIdString "corgi-menus-networkmanager-connection-profiles-"`"
      connectionsMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-networkmanager.shlib&quot; ; buildConnectionProfilesMenu $shouldAppendWifiNetworks'"
      pipeMenuContent="$pipeMenuContent`corgiObMenu "id:$menuId" "label:Connection Profiles" "execute:$connectionsMenuCommand"`"
    fi

    if $shouldAppendWifiNetworks
    then

      menuId="`corgiMakeIdString "corgi-menus-networkmanager-wifi-networks-visible-"`"
      wifiMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-networkmanager.shlib&quot; ; buildWifiNetworksMenu'"
      pipeMenuContent="$pipeMenuContent`corgiObMenu "id:$menuId" "label:Wireless Networks" "execute:$wifiMenuCommand"`"

      menuId="`corgiMakeIdString "corgi-menus-networkmanager-wifi-networks-hidden-"`"
      wifiMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-networkmanager.shlib&quot; ; buildWifiNetworksMenu &quot;hidden&quot;'"
      pipeMenuContent="$pipeMenuContent`corgiObMenu "id:$menuId" "label:Wireless Networks (Hidden)" "execute:$wifiMenuCommand"`"

      connectToHiddenCommand="sh -c 'cd \"$currentDirectory\" ; . \"$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-networkmanager.shlib\" ; connectToAuthenticatedHiddenWifiNetwork'"
      connectToHiddenWifiItem="`corgiObMenuItem "label:Connect To A Hidden Wireless Network" "action:Execute" "command:$connectToHiddenCommand"`"
      pipeMenuContent="$pipeMenuContent$wifiNetworkMenus$connectToHiddenWifiItem"

    fi

  fi

fi

pipeMenu="`corgiObPipeMenu "content:$pipeMenuContent"`"
exitStatus=$?

if [ -z "$pipeMenu" ]
then
  logger "ERROR (corgi-openbox-menu-networkmanager): Unable to generate pipe menu. Exiting..."
  echo "ERROR (corgi-openbox-menu-networkmanager): Unable to generate pipe menu. Exiting..."
else
  echo "$pipeMenu"
fi

exit $exitStatus