#!/bin/sh

# Copyright 2016 Antonio Malcolm, released under an MPL, v. 2.0, license. All rights reserved.
#
# This file is part of Corgi Scripts (also referred to as corgi-scripts).
#
# Corgi Scripts is subject to the terms of the Mozilla Public License, v. 2.0. 
# If a copy of the MPL was not distributed with this file, 
# you can obtain one at http://mozilla.org/MPL/2.0/.
#
# Corgi Scripts is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either expressed or implied.
# See LICENSE.txt, for the specific language governing rights and limitations under the License,
# which should have been provided with this software, or visit http://mozilla.org/MPL/2.0/.

# corgi-audio-management.shlib - handles management of audio features, such as volume and muting, 
#                                using alsa and pulseaudio as backends
#
# v2016.10.25
#
# Authored by Antonio Malcolm
#
#
# Requires: corgi-openbox-menus-core.shlib
# Requires: corgi-audio-management.shlib
# Requires: corgi-posix-core.shlib (normally provided by corgi-openbox-menus-core.shlib or corgi-audio-management.shlib)


currentDirectory="`dirname "$0"`"
currentDirectory="`cd "$currentDirectory" ; pwd -P `"
parentDirectory="`dirname $currentDirectory`"

corgiObMenuLib="$parentDirectory/lib/corgi/openbox/corgi-openbox-menus-core.shlib"
corgiAudioManagementLib="$parentDirectory/lib/corgi/corgi-audio-management.shlib"

if [ ! -e "$corgiObMenuLib" ]
then
  logger "ERROR (corgi-openbox-menus-audio.shlib): $corgiObMenuLib is missing. Exiting..."
  echo "ERROR (corgi-openbox-menus-audio.shlib): $corgiObMenuLib is missing. Exiting..."
  exit 1
fi

if [ ! -e "$corgiAudioManagementLib" ]
then
  logger "ERROR (corgi-openbox-menus-audio.shlib): $corgiAudioManagementLib is missing. Exiting..."
  echo "ERROR (corgi-openbox-menus-audio.shlib): $corgiAudioManagementLib is missing. Exiting..."
  exit 1
fi

. "$corgiObMenuLib"
. "$corgiAudioManagementLib"

hasAlsa=false
hasPulseAudio=false

if ! corgiHasCommand aplay || ! corgiHasCommand arecord
then
  logger "ERROR (corgi-openbox-menus-displays.shlib): alsa utils not found. Please install alsa utils."
else 
  hasAlsa=true
fi

if ! corgiHasCommand pactl
then
  logger "ERROR (corgi-openbox-menus-displays.shlib): pulseaudio not found. Please install pulseaudio"
else 
  hasPulseAudio=true
fi


buildSetVolumeLevelsControlsMenuItem() {

  control="$1"
  percentage="$2"
  shouldUsePulseAudio=$2

  percentageDefault=35

  if [ -z "$percentage" ]
  then
    percentage=$percentageDefault
    shouldUsePulseAudio="$2"
  fi

  if [ "$percentage" != 'mute' ] && [ "$percentage" != 'up' ] && [ "$percentage" != 'down' ]
  then

    if [ $percentage -lt 0 ] || [ $percentage -gt 100 ]
    then
      percentage=$percentageDefault
    fi

  fi

  if [ -z "$shouldUsePulseAudio" ] || [ $shouldUsePulseAudio != true ]
  then
    shouldUsePulseAudio=false 
  fi

  setVolumeLevelMenuItem=''
  maxVolumeIcon="$parentDirectory/share/icons/corgi/openbox/menus/audio/audio-volume-max.png"
  muteVolumeIcon="$parentDirectory/share/icons/corgi/openbox/menus/audio/audio-volume-mute.png"
  muteVolumeIconSecondary="$parentDirectory/share/icons/corgi/openbox/menus/audio/audio-volume-mute-secondary.png"

  amixerOut="`amixer get $control | grep '%'`"
  icon=''

  if [ "$percentage" = 'mute' ]
  then

    if corgiHasSubstring "$amixerOut" '[off]'
    then
      icon="icon:$muteVolumeIcon"
    fi

    setVolumeLevelCommand="corgi-audio-control &quot;mute&quot; &quot;$control&quot; $shouldUsePulseAudio"
    setVolumeLevelMenuItem="`corgiObMenuItem "label:Mute / Unmute" "$icon" "action:Execute" "command:$setVolumeLevelCommand"`"

  elif [ "$percentage" = 'up' ]
  then

    setVolumeLevelCommand="corgi-audio-control &quot;up&quot; &quot;$control&quot; $shouldUsePulseAudio"
    setVolumeLevelMenuItem="`corgiObMenuItem "label:Higher" "action:Execute" "command:$setVolumeLevelCommand"`"

  elif [ "$percentage" = 'down' ]
  then

    setVolumeLevelCommand="corgi-audio-control &quot;down&quot; &quot;$control&quot; $shouldUsePulseAudio"
    setVolumeLevelMenuItem="`corgiObMenuItem "label:Lower" "action:Execute" "command:$setVolumeLevelCommand"`"

  else

    amixerPercentage="`corgiFetchSubstringBetween "$amixerOut" '[' '%]'`"
    label="$percentage%"

    # Sometimes, either Alsa sets the volume a percentage off, or reads the volume a percentage off.
    # This is a workable compromise...
    if [ $amixerPercentage -ge $percentage ] && [ $amixerPercentage -lt $(($percentage + 5)) ]
    then

      if corgiHasSubstring "$amixerOut" '[off]'
      then
        icon="$muteVolumeIconSecondary"
        label="$label (muted)"
      else
        icon="$maxVolumeIcon"
      fi

    fi

    setVolumeLevelCommand="corgi-audio-control &quot;percent&quot; $percentage &quot;$control&quot; $shouldUsePulseAudio"
    setVolumeLevelMenuItem="`corgiObMenuItem "label:$label" "icon:$icon" "action:Execute" "command:$setVolumeLevelCommand"`"

  fi

  echo "$setVolumeLevelMenuItem"
  exit $?

}


# Generates and echoes Openbox menus (as an XML-formatted string) which permits the manipulation of audio output level.
#
# $1 - string, required, the name of the interface which is used to set the display brightness
buildVolumeLevelsControlsMenu() {
  
  control="$1"
  shouldUsePulseAudio=$2

  if [ -z "$shouldUsePulseAudio" ] || [ $shouldUsePulseAudio != true ]
  then
    shouldUsePulseAudio=false 
  fi

  setVolumeLevelMenuItems="`buildSetVolumeLevelsControlsMenuItem "$control" "mute" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "up" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "down" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "10" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "15" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "20" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "25" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "30" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "35" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "40" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "45" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "50" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "55" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "60" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "65" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "70" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "75" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "80" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "85" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "90" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "95" $shouldUsePulseAudio`"
  setVolumeLevelMenuItems="$setVolumeLevelMenuItems`buildSetVolumeLevelsControlsMenuItem "$control" "100" $shouldUsePulseAudio`"
 
  echo "`corgiObPipeMenu "content:$setVolumeLevelMenuItems"`"
  exit $?

}


buildAlsaDeviceControlMenu() {

  control="$1"
  deviceIoType="$2"
  shouldUsePulseAudio=$3
  card="$4"
  device="$5"

  if [ -z "$deviceIoType" ]
  then
    deviceIoType='simple'
  fi

  if [ $deviceIoType = true ] || [ $deviceIoType = false ]
  then
    deviceIoType='simple'
    shouldUsePulseAudio=$2
  fi

  if [ -z "$shouldUsePulseAudio" ] || [ $shouldUsePulseAudio != true ]
  then
    shouldUsePulseAudio=false 
  fi

  if [ ! -z "$card" ]
  then
    card=": $card"
  fi

  if [ ! -z "$device" ]
  then
    device=", $device"
  fi

  controlMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-audio.shlib&quot; ; buildVolumeLevelsControlsMenu &quot;$control&quot; $shouldUsePulseAudio'"
  controlMenuId="`corgiMakeIdString "corgi-menu-audio-control-$deviceIoType-"`"

  echo "`corgiObMenu "id:$controlMenuId" "label:$control$card$device" "execute:$controlMenuCommand"`"
  exit $?

}


buildAlsaDeviceControlsMenus() {

  deviceIoType="$1"
  shouldUsePulseAudio=$2

  if [ -z "$deviceIoType" ]
  then
    deviceIoType='simple'
  fi

  if [ $deviceIoType = true ] || [ $deviceIoType = false ]
  then
    deviceIoType='simple'
    shouldUsePulseAudio=$1
  fi

  if [ -z "$shouldUsePulseAudio" ] || [ $shouldUsePulseAudio != true ]
  then
    shouldUsePulseAudio=false 
  fi

  alsaCommand='amixer scontrols'

  if [ "$deviceIoType" != 'simple' ]
  then

    if [ "$deviceIoType" != 'input' ]
    then
      alsaCommand='aplay --list-pcms'
    else
      alsaCommand='arecord --list-pcms'
    fi

  fi

  controlMenus=''
  controlByCardMenus=''
  processedCards="$corgiDelimiter"
  
  $alsaCommand | {

    inputDeviceMenus=''
    outputDeviceMenus=''
    simpleDeviceMenus=''

    while read -r line
    do

      if [ "$deviceIoType" = 'simple' ]
      then

        control="`corgiFetchSubstringBetween "$line" "'" "'"`"
        simpleDeviceMenus="$simpleDeviceMenus`buildAlsaDeviceControlMenu "$control" 'output' $shouldUsePulseAudio`"

      else
      
        if ! corgiStartsWithSubstring "$line" ' ' && ! corgiStartsWithSubstring "$line" 'null'
        then

          if corgiHasSubstring "$line" ':' || corgiStartsWithSubstring "$line" 'default'
          then

            controlAndCard="`corgiFetchSubstringBefore "$line" ','`"
            control="`corgiFetchSubstringBefore "$controlAndCard" ':'`"
            card=''
            device=''

            if [ "$control" != 'default' ]
            then

              card="`corgiFetchSubstringBetween "$controlAndCard" 'CARD=' ','`"

              if [ "$control" != 'sysdefault' ]
              then
                device="`corgiFetchSubstringAfter "$line" 'DEV='`"
              fi

            fi

            if [ "$deviceIoType" != 'input' ]
            then
              outputDeviceMenus="$outputDeviceMenus`buildAlsaDeviceControlMenu "$control" 'output' $shouldUsePulseAudio "$card" "$device"`"
            else
              inputDeviceMenus="$inputDeviceMenus`buildAlsaDeviceControlMenu "$control" 'input' $shouldUsePulseAudio "$card" "$device"`"
            fi

          fi

        fi

      fi

    done

    echo "`corgiObPipeMenu "content:$inputDeviceMenus$outputDeviceMenus$simpleDeviceMenus"`"
    exit 0

  }

  exit $?
  
}


buildDevicesAlsaPcmsMenuItems() {
  
  cardName="$1"
  devNumber=$2
  
  grepSearchText="CARD=$cardName,DEV=$devNumber"

  aplay --list-pcms | grep $grepSearchText | {

    while read -r line
    do

      controlAndCard="`corgiFetchSubstringBefore "$line" ','`"
      control="`corgiFetchSubstringBefore "$controlAndCard" ':'`"
      card=": `corgiFetchSubstringBetween "$controlAndCard" 'CARD=' ','`"
      device=", `corgiFetchSubstringAfter "$line" 'DEV='`"
  
      pcmsMenuItems="$pcmsMenuItems`corgiObMenuItem "label:$control$card$device"`"

    done

    echo "$pcmsMenuItems"
    exit 0

  }

  exit $?

}


buildDevicesAlsaMenu() {

  deviceIoType=$1
  
  if [ "$deviceIoType" != 'input' ]
  then
    deviceIoType='aplay'
  else
    deviceIoType='arecord'
  fi

  alsaDeviceMenus=''

  $deviceIoType --list-devices | {
  
    while read -r line
    do

      if corgiStartsWithSubstring "$line" 'card'
      then

        cardName="`corgiFetchSubstringBetween "$line" 'card ' ' ' 'first'`"
        cardName="$cardName `corgiFetchSubstringBetween "$line" '[' ']' 'first'`"
        
        cardShortName="`corgiFetchSubstringBetween "$line" ': ' ' [' 'first'`"

        deviceNumber="`corgiFetchSubstringBetween "$line" 'device ' ':' 'last'`"
        deviceName="$deviceNumber: `corgiFetchSubstringBetween "$line" '[' ']' 'last'`"
        deviceDescription="`corgiFetchSubstringBetween "$line" ': ' ' [' 'last'`"

        cardMenuItem="`corgiObMenuItem "label:Card: $cardName"`"
        deviceDescriptionMenuItem="`corgiObMenuItem "label:Description: $deviceDescription"`"

        alsaPcmsMenuItems="`buildDevicesAlsaPcmsMenuItems "$cardShortName" "$deviceNumber"`"
        
        menuId="`corgiMakeIdString "corgi-menus-audio-devices-alsa-pcms-"`"
        
        if [ ! -z "$alsaPcmsMenuItems" ]
        then
          alsaPcmsMenu="`corgiObMenu "id:$menuId" "label:PCMs" "content:$alsaPcmsMenuItems"`"
        else
          alsaPcmsMenu=''
        fi

        menuId="`corgiMakeIdString "corgi-menus-audio-device-alsa-"`"
        alsaDeviceMenus="$alsaDeviceMenus`corgiObMenu "id:$menuId" "label:$deviceName" "content:$deviceDescriptionMenuItem$cardMenuItem$alsaPcmsMenu"`"

      fi

    done

    echo "`corgiObPipeMenu "content:$alsaDeviceMenus"`"
    exit 0

  }
  
  exit $?

}


buildDevicesPulseAudioMenu() {

  deviceIoType=$1
  
  if [ "$deviceIoType" != 'input' ]
  then
    deviceIoType='list sinks'
  else
    deviceIoType='list sources'
  fi

  pulseAudioMenus=''

  pactl $deviceIoType | grep -e 'Name:' -e 'Description:' -e 'alsa.name =' -e \
  'alsa.device =' -e 'alsa.card_name =' -e 'device.product.name =' -e 'device.vendor.name =' | {

    pulseAudioMenuItems=''
    name=''
    description=''
    alsaDeviceName=''
    alsaDeviceNumber=''
    alsaCardName=''
    alsaCardNumber=''
    productName=''
    deviceVendor=''

    while read -r line
    do

      line="`corgiTrimWhiteSpace "$line"`"

      if corgiStartsWithSubstring "$line" 'Connection failure'
      then
        menuId="`corgiMakeIdString "corgi-menus-audio-device-pulseaudio-"`"
        pulseAudioMenus="$pulseAudioMenus`corgiObMenu "id:$menuId" "label:pulseaudio connection required"`"        
      fi

      if corgiStartsWithSubstring "$line" 'Name:'
      then

        if [ ! -z "$name" ]
        then

          pulseAudioMenuItems="`corgiObMenuItem "label:$description"`"
          pulseAudioMenuItems="$pulseAudioMenuItems`corgiObMenuItem "label:Alsa Device: $alsaDeviceNumber: $alsaDeviceName"`"
          pulseAudioMenuItems="$pulseAudioMenuItems`corgiObMenuItem "label:Alsa Card: $alsaCardNumber: $alsaCardName"`"          
          pulseAudioMenuItems="$pulseAudioMenuItems`corgiObMenuItem "label:Vendor Product: $productName"`"
          pulseAudioMenuItems="$pulseAudioMenuItems`corgiObMenuItem "label:Vendor $deviceVendor"`"

          menuId="`corgiMakeIdString "corgi-menus-audio-device-pulseaudio-"`"
          pulseAudioMenus="$pulseAudioMenus`corgiObMenu "id:$menuId" "label:$name" "content:$pulseAudioMenuItems"`"

        fi

        name="`corgiFetchSubstringAfter "$line" ': '`"

        pulseAudioMenuItems=''
        description=''
        alsaDeviceName=''
        alsaDeviceNumber=''
        alsaCardName=''
        alsaCardNumber=''
        productName=''
        deviceVendor=''

      fi

      if corgiStartsWithSubstring "$line" 'Description:'
      then
        description="$line"
      fi

      if corgiStartsWithSubstring "$line" 'alsa.name'
      then
        alsaDeviceName="`corgiFetchSubstringBetween "$line" '"' '"'`"
      fi

      if corgiStartsWithSubstring "$line" 'alsa.device'
      then
        alsaDeviceNumber="`corgiFetchSubstringBetween "$line" '"' '"'`"
      fi

      if corgiStartsWithSubstring "$line" 'alsa.card_name'
      then
        alsaCardName="`corgiFetchSubstringBetween "$line" '"' '"'`"
      fi

      if corgiStartsWithSubstring "$line" 'alsa.card ='
      then
        alsaCardNumber="`corgiFetchSubstringBetween "$line" '"' '"'`"
      fi

      if corgiStartsWithSubstring "$line" 'device.product.name'
      then
        productName="`corgiFetchSubstringBetween "$line" '"' '"'`"
      fi

      if corgiStartsWithSubstring "$line" 'device.vendor.name'
      then
        deviceVendor="`corgiFetchSubstringBetween "$line" '"' '"'`"
      fi

    done

    echo "`corgiObPipeMenu "content:$pulseAudioMenus"`"
    exit 0

  }
  
  exit $?

}


buildDevicesMenu() {

  devicesAlsaInputsMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-audio.shlib&quot; ; buildDevicesAlsaMenu &quot;input&quot;'"

  menuId="`corgiMakeIdString "corgi-menu-audio-devices-alsa-inputs-"`"
  devicesAlsaMenus="`corgiObMenu "id:$menuId" "label:Input" "execute:$devicesAlsaInputsMenuCommand"`"

  devicesAlsaOutputsMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-audio.shlib&quot; ; buildDevicesAlsaMenu &quot;output&quot;'"

  menuId="`corgiMakeIdString "corgi-menu-audio-devices-alsa-outputs-"`"
  devicesAlsaMenus="$devicesAlsaMenus`corgiObMenu "id:$menuId" "label:Output" "execute:$devicesAlsaOutputsMenuCommand"`"

  menuId="`corgiMakeIdString "corgi-menu-audio-devices-alsa-"`"
  devicesAlsaMenu="`corgiObMenu "id:$menuId" "label:ALSA" "content:$devicesAlsaMenus"`"

  devicesPulseAudioMenu=''

  if [ $hasPulseAudio = true ]
  then

    devicesPulseAudioInputsMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-audio.shlib&quot; ; buildDevicesPulseAudioMenu &quot;input&quot;'"

    menuId="`corgiMakeIdString "corgi-menu-audio-devices-pulseaudio-inputs-"`"
    devicesPulseAudioMenus="`corgiObMenu "id:$menuId" "label:Input" "execute:$devicesPulseAudioInputsMenuCommand"`"

    devicesPulseAudioOutputsMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-audio.shlib&quot; ; buildDevicesPulseAudioMenu &quot;output&quot;'"

    menuId="`corgiMakeIdString "corgi-menu-audio-devices-pulseaudio-outputs-"`"
    devicesPulseAudioMenus="$devicesPulseAudioMenus`corgiObMenu "id:$menuId" "label:Output" "execute:$devicesPulseAudioOutputsMenuCommand"`"

    menuId="`corgiMakeIdString "corgi-menu-audio-devices-pulseaudio-"`"
    devicesPulseAudioMenu="`corgiObMenu "id:$menuId" "label:PulseAudio" "content:$devicesPulseAudioMenus"`"

  fi

  menuId="`corgiMakeIdString "corgi-menu-audio-device-alsa-"`"
  echo "`corgiObMenu "id:$menuId" 'label:Devices' "content:$devicesAlsaMenu$devicesPulseAudioMenu"`"
  exit $?

}

buildControlsMenu() {

  shouldUsePulseAudio=$1

  if [ -z "$shouldUsePulseAudio" ] || [ $shouldUsePulseAudio != true ]
  then
    shouldUsePulseAudio=false 
  fi

  inputControlsMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-audio.shlib&quot; ; buildAlsaDeviceControlsMenus &quot;input&quot; $shouldUsePulseAudio'"

  menuId="`corgiMakeIdString "corgi-menu-audio-controls-input-"`"
  inputControlsMenu="`corgiObMenu "id:$menuId" "label:Inputs" "execute:$inputControlsMenuCommand"`"

  outputControlsMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-audio.shlib&quot; ; buildAlsaDeviceControlsMenus &quot;output&quot; $shouldUsePulseAudio'"
  
  menuId="`corgiMakeIdString "corgi-menu-audio-controls-output-"`"
  outputControlsMenu="`corgiObMenu "id:$menuId" "label:Outputs" "execute:$outputControlsMenuCommand"`"

  simpleControlsMenuCommand="sh -c 'cd &quot;$currentDirectory&quot; ; . &quot;$parentDirectory/lib/corgi/openbox/menus/corgi-openbox-menus-audio.shlib&quot; ; buildAlsaDeviceControlsMenus &quot;simple&quot; $shouldUsePulseAudio'"
  
  menuId="`corgiMakeIdString "corgi-menu-audio-controls-simple-"`"
  simpleControlsMenu="`corgiObMenu "id:$menuId" "label:Simple" "execute:$simpleControlsMenuCommand"`"

  menuId="`corgiMakeIdString "corgi-menu-audio-controls-"`"
  echo "`corgiObMenu "id:$menuId" 'label:Controls' "content:$inputControlsMenu$outputControlsMenu$simpleControlsMenu"`"
  exit $?

}

buildAudioMenu() {

  if [ $hasAlsa = false ]
  then
    echo "`corgiObMenuItem "label:audio menu requires alsa"`"
    exit 1
  fi

  shouldUsePulseAudio=$1

  if [ -z "$shouldUsePulseAudio" ] || [ $shouldUsePulseAudio != true ]
  then
    shouldUsePulseAudio=false 
  fi

  controlsMenu="`buildControlsMenu`"
  devicesMenu="`buildDevicesMenu`"
  
  echo "$controlsMenu$devicesMenu"
  exit $?
}
