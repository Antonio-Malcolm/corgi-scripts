#!/bin/sh

# Copyright 2016 Antonio Malcolm, released under an MPL, v. 2.0, license. All rights reserved.
#
# This file is part of Corgi Scripts (also referred to as corgi-scripts).
#
# Corgi Scripts is subject to the terms of the Mozilla Public License, v. 2.0. 
# If a copy of the MPL was not distributed with this file, 
# you can obtain one at http://mozilla.org/MPL/2.0/.
#
# Corgi Scripts is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either expressed or implied.
# See LICENSE.txt, for the specific language governing rights and limitations under the License,
# which should have been provided with this software, or visit http://mozilla.org/MPL/2.0/.

# corgi-power-management-cpu.shlib - Functions used to describe and manage power management and throttling options for CPUs, 
#                                                  using /proc/cpuinfo and cpupower as backends.
#
# v2017.06.05
#
# Authored by Antonio Malcolm
#
# Requires: corgi-posix-core.shlib
# Requires: cpupower - for obtaining information describing CPU performance and power saving characteristics,
#                      as well as setting performance and power saving options
# Optional: libnotify - used for informational and success notifications


currentDirectory="`dirname "$0"`"
currentDirectory="`cd "$currentDirectory" ; pwd -P `"
parentDirectory="`dirname $currentDirectory`"

corgiCoreLib="$parentDirectory/lib/corgi/corgi-posix-core.shlib"

if [ ! -e "$corgiCoreLib" ]
then
  logger "ERROR (corgi-power-management-cpu.shlib): $corgiCoreLib is missing. Exiting..."
  echo "ERROR (corgi-power-management-cpu.shlib): $corgiCoreLib is missing. Exiting..."
  exit 1
fi

. "$corgiCoreLib"

hasCpuPower=false
hasNotify=false

if ! corgiHasCommand cpupower
then
  logger "ERROR (corgi-power-management-cpu.shlib): cpupower not found. Please install cpupower"
else 
  hasCpuPower=true
fi

if ! corgiHasCommand notify-send
then
  logger "INFO (corgi-power-management-cpu.shlib): libnotify (notify-send) not found. We will default to zenity, if it's available."
else
  hasNotify=true  
fi


dataDelimiter=','


# Obtains and echoes descriptive data, from the system, with a row name
# which matches the provided name, for the processor with an id matching the provided id.
#
# $1 - string, required, the id for the processor for which data is being obtained
# $2 - true or false, optional, sets whether or not the provided id belongs to
#      a physical or logical processor (i.e., a core or thread) - defaults to false
# $3 - string, required, the row name for data which should be echoed
# $4 ($6, if 5 or more args are provided) - true or false, I can't remember what the fuck this was for.
#      I wrote the documentation some months after writing the function.
#      I believe it is to obtain the data of a single logical processor (core or thread)
#      I will update this documentation in the near future...
#
# $4 (if 5 or more args are provided) - string, optional, to match against a processor with
#     data containing a row with the provided name
# $5 (if 5 or more args are provided) - string, optional, to match against a processor with
#     data containing a row with the provided value 
getCpuInfo() {
  
  processorIdLabel='processor'
  
  processorId="$1"
  usePhysicalId=$2
  desiredData="$3"
  singleSampleOnly=$4
  
  whereClauseLabel='_OMITTED_WHERE_CLAUSE_'
  whereClauseValue=''
  
  if [ $# -ge 5 ]
  then
    desiredData="$3"
    whereClauseLabel="$4"
    whereClauseValue="$5"
    singleSampleOnly=$6
  fi
  
  if [ -z "$usePhysicalId" ] || [ $usePhysicalId != true ]
  then
    usePhysicalId=false
  fi
  
  if [ -z "$singleSampleOnly" ] || [ $singleSampleOnly != true ]
  then
    singleSampleOnly=false
  fi
  
  if [ $usePhysicalId = true ]
  then
    processorIdLabel='physical id'    
  fi
  
  cat /proc/cpuinfo | {
    
    currentProcessorId=''
    currentWhereClauseValue=''
    currentDescriptorData=''
    returnedDescriptorData=''
    numCores=''
    
    while read -r line
    do

      # Typically, there's an empty line between devices in the response...
      if [ ! -z "$line" ]
      then
        
        if corgiStartsWithSubstring "$line" "$processorIdLabel"
        then
          
          currentProcessorId="`corgiFetchSubstringAfter "$line" ':' 'first'`"  
          currentProcessorId="`corgiTrimWhiteSpace "$currentProcessorId"`"
        
        elif corgiStartsWithSubstring "$line" "$whereClauseLabel"
        then
          
          currentWhereClauseValue="`corgiFetchSubstringAfter "$line" ':' 'first'`"  
          currentWhereClauseValue="`corgiTrimWhiteSpace "$currentWhereClauseValue"`"
          
        elif corgiStartsWithSubstring "$line" "$desiredData"
        then
          
          currentDescriptorData="`corgiFetchSubstringAfter "$line" ':' 'first'`"  
          currentDescriptorData="`corgiTrimWhiteSpace "$currentDescriptorData"`"        
        
        fi
      
      elif [ "$currentProcessorId" = "$processorId" ]
      then

        if [ "$whereClauseLabel" = '_OMITTED_WHERE_CLAUSE_' ] || [ "$currentWhereClauseValue" = "$whereClauseValue" ]
        then
          
          if [ $singleSampleOnly = true ]
          then
            returnedDescriptorData="$currentDescriptorData"
            break
          else

            if [ "$desiredData" = 'core id' ] && [ ! -z "$returnedDescriptorData" ]
            then  

              # Prevent duplicate entries, for configurations in which a processor has multithreaded cores
              # (This data is taken from /proc/cpuinfo, which groups output by logical processor,
              # in which case, every processor is a thread, and threads belonging to a core will share that core's id.) 

              if corgiStartsWithSubstring "$returnedDescriptorData" "$currentDescriptorData$dataDelimiter" \
              || corgiEndsWithSubstring "$returnedDescriptorData" "$dataDelimiter$currentDescriptorData" \
              || corgiHasSubstring "$returnedDescriptorData" "$dataDelimiter$currentDescriptorData$dataDelimiter"
              then
                currentDescriptorData='_OMITTED-DUPLICATE_'  
              fi

            fi
            
            if [ "$currentDescriptorData" != '_OMITTED-DUPLICATE_' ]
            then
              currentDescriptorData="`corgiTrimWhiteSpace "$currentDescriptorData"`"
              returnedDescriptorData="$returnedDescriptorData$currentDescriptorData$dataDelimiter"
            fi
          
          fi

        fi
      
      fi
     
    done
    
    echo "$returnedDescriptorData"
    exit 0
    
  }
  
  exit $?
  
}


# Obtains and echoes the minimum and maximum frequencies, in MHz, as well as the governor,
# supported or currently made available by the processor with an id matching the provided id.
#
# $1 - string, required, the id for the processor for which min and max frequencies and governor are being determined
# $2 - string, optional, determines whether or not the governor should be echoed with the frequencies supported by the processor,
#      defaults to "--policy" (obtains and echoes the governor info)
getCpuFrequencyInfo() {

  frequencyInfoOption=' --hwlimits'
  
  processorId="$1"
  userSetting="$2"
  
  if [ ! -z  "$userSetting" ] && [ "$userSetting" = 'user' ]
  then
    frequencyInfoOption=' --policy'
  fi

  cpupower --cpu "$processorId" frequency-info $frequencyInfoOption | {

    response=''

    while read -r line
    do

      # Speeds are on the last line, and there are, normally, only two lines...
      if [ ! -z "$line" ]
      then
      	# We must compensate for cpupower v4.9's new, assinine, more verbose output...
      	response="$response $line"
      fi

    done

    if [ ! -z "$response" ]
    then

      minSpeed=''
      maxSpeed=''
      governor=''
      response="`corgiFetchSubstringAfter "$response" ':'`"

      # GHz notation was introduced with cpupower v4.9,
      # along with more verbose output...
      	
      if [ "$frequencyInfoOption" = ' --policy' ]
      then

        if corgiHasSubstring "$response" 'frequency should be within'
        then
          	
          governor="$dataDelimiter`corgiFetchSubstringBetween "$response" 'governor' 'may'`"
          governor="`corgiRemoveAllOccurrencesOfSubstring "$governor" '"'`"
          governor="`corgiRemoveAllOccurrencesOfSubstring "$governor" ' '`"
          governor="`corgiTrimWhiteSpace "$governor"`"

          response="`corgiFetchSubstringBetween "$response" 'frequency should be within' 'The governor'`"
          response="`corgiReplaceAllOccurrencesOfSubstring "$response" 'and' '-'`"
          
        else
          governor="$dataDelimiter`corgiFetchSubstringAfter "$response" ' '`"
          response="`corgiFetchSubstringBefore "$response" ' '`"
        fi

      fi
     
      # Maintain compatibility, as best we can, with both cpupower v4.9,
      # as well as with earlier versions (which provide both governor
      # and frequency info with the --policy option),
      # because the developers at cpupower are arseholes, who can't
      # simply decide on a standard for outputting CPU speed.

      if corgiHasSubstring "$response" 'GHz' || corgiHasSubstring "$response" 'MHz'
      then

        # This is cpupower v4.9+...

      	response="`corgiRemoveAllOccurrencesOfSubstring "$response" '.'`"
      	
      	minSpeed="`corgiFetchSubstringBefore "$response" '-'`"
      	minSpeed="`corgiRemoveAllOccurrencesOfSubstring "$minSpeed" ' '`"
      	
      	if corgiEndsWithSubstring "$minSpeed" 'GHz'
      	then
      	
      	  minSpeed="`corgiRemoveAllOccurrencesOfSubstring "$minSpeed" 'GHz'`"
      	  minSpeed="`corgiPadString "$minSpeed" '0' 4`"
      	
        elif corgiEndsWithSubstring "$minSpeed" 'MHz'
        then
      	  minSpeed="`corgiRemoveAllOccurrencesOfSubstring "$minSpeed" 'MHz'`"
      	fi
      	
      	maxSpeed="`corgiFetchSubstringAfter "$response" '-'`"
      	maxSpeed="`corgiRemoveAllOccurrencesOfSubstring "$maxSpeed" ' '`"
      	
      	if corgiEndsWithSubstring "$maxSpeed" 'GHz'
      	then
      	  maxSpeed="`corgiRemoveAllOccurrencesOfSubstring "$maxSpeed" 'GHz'`"
      	  maxSpeed="`corgiPadString "$maxSpeed" '0' 4`"
      	elif corgiEndsWithSubstring "$maxSpeed" 'MHz'
      	then
      	  maxSpeed="`corgiRemoveAllOccurrencesOfSubstring "$maxSpeed" 'MHz'`"
      	fi
        
      elif [ "$frequencyInfoOption" = ' --hwlimits' ]
      then
        minSpeed="`corgiFetchSubstringBefore "$response" ' '`"
        minSpeed="`corgiTrimStringByLength "$minSpeed" 3`"
        maxSpeed="`corgiFetchSubstringAfter "$response" ' '`"
        maxSpeed="`corgiTrimStringByLength "$maxSpeed" 3`"
      fi

      response="`corgiTrimWhiteSpace "$response"`"
      response="$minSpeed$dataDelimiter$maxSpeed$governor"

    fi

    echo "$response"

    exit 0

  }

  exit $?
  
}


# Obtains and echoes descriptive data, from cpupower, with a row name
# which matches the provided name, for the processor with an id matching the provided id.
#
# $1 - string, required, the id for the processor for which data is being obtained
# $2 - string, required, the row name for data which should be echoed
getCpuPowerInfo() {
  
  processorId="$1"
  desiredData="$2"
  
  cpupower --cpu "$processorId" info | {
    
    response=''
    
    while read -r line
    do

      if [ "$desiredData" = 'perf-bias' ] && corgiHasSubstring "$line" 'needs root'
      then
        response='requires root'
        break
      fi

      if corgiStartsWithSubstring "$line" "$desiredData"
      then
        response="`corgiFetchSubstringAfter "$line" ':' 'first'`"  
        response="`corgiTrimWhiteSpace "$response"`"
        break
      fi
      
    done
    
    echo "$response"
    exit 0
    
  }
  
  exit $?
  
}


# Obtains and echoes the minimum and maximum frequencies, in MHz, 
# supported or currently made available by the processors with ids matching the provided ids.
#
# $1 - string, required, comma-delimited list of ids for processors for which min and max frequencies are being determined
# $2 - true or false, optional, determines whether or not the echoed frequencies should be the min and max supported by the processor,
#      or those currently available (i.e., set by the user) -
#      defaults to false
getMinAndMaxFrequencies() {
  
  minSpeed=''
  maxSpeed=''
  activeOption='limit'
  
  processorIds="$1"
  shouldGetActive=$2
  
  if [ -z "$shouldGetActive" ] || [ $shouldGetActive != true ]
  then
    shouldGetActive=false
  fi
  
  if ! corgiEndsWithSubstring "$processorIds" $dataDelimiter
  then
    processorIds="$processorIds$dataDelimiter"
  fi
  
  if [ $shouldGetActive = true ]
  then
    activeOption='user'
  fi

  while corgiHasSubstring "$processorIds" $dataDelimiter
  do
                
    processorId="`corgiFetchSubstringBefore "$processorIds" $dataDelimiter 'first'`"
    cpuFrequencyInfo="`getCpuFrequencyInfo "$processorId" "$activeOption"`"

    if [ $shouldGetActive = true ]
    then
      cpuFrequencyInfo="`corgiFetchSubstringBefore "$cpuFrequencyInfo" "$dataDelimiter"`"
    fi

    processorMinSpeed="`corgiFetchSubstringBefore "$cpuFrequencyInfo" "$dataDelimiter"`"
    processorMaxSpeed="`corgiFetchSubstringAfter "$cpuFrequencyInfo" "$dataDelimiter"`"

    if corgiHasSubstring "$processorMinSpeed" '.'
    then
      processorMinSpeed="`corgiFetchSubstringBefore "$processorMinSpeed" '.'`"  
    fi
  
    if corgiHasSubstring "$processorMaxSpeed" '.'
    then
      processorMaxSpeed="`corgiFetchSubstringBefore "$processorMaxSpeed" '.'`"  
    fi    
    
    if [ -z "$minSpeed" ]
    then
      minSpeed=$processorMinSpeed
      maxSpeed=$processorMaxSpeed
    else
    
      if [ $processorMinSpeed -ge $minSpeed ]
      then
        minSpeed=$processorMinSpeed  
      fi
      
      if [ $processorMaxSpeed -le $maxSpeed ]
      then
        maxSpeed=$processorMaxSpeed  
      fi

    fi

    processorIds="`corgiFetchSubstringAfter "$processorIds" $dataDelimiter 'first'`"

  done

  echo "$minSpeed$dataDelimiter$maxSpeed"
  exit $?
  
}


# Returns one or zero,based on whether or not the processor with an id matching the provided id has boost support.
#
# $1 - string, required, the processor id for the processor for which boost support is being determined
cpuHasBoostSupport() {
  
  processorId="$1"
  
  boostStateSupportStatus="`cpupower --cpu "$processorId" frequency-info | grep 'Supported'`"
  boostStateSupportStatus="`corgiFetchSubstringAfter "$boostStateSupportStatus" ':' 'first'`"
  boostStateSupportStatus="`corgiTrimWhiteSpace "$boostStateSupportStatus"`"

  if [ "$boostStateSupportStatus" = 'yes' ]
  then
    return 0
  fi
  
  return 1
  
}


# Obtains and echoes the current boost state for the processor with an id matching the provided id.
#
# $1 - string, required, the processor id for the processor for which the boost state is being obtained
# $2 - true or false, optional, determines whether or not the echoed state should be specific, i.e.,
#      whether or not it should be stated that boost is enabled or disabled, vs supported or unsupported - 
#      defaults to false
getCpuBoostState() {
  
  state='unsupported'
  
  processorId="$1"
  beSpecific=$2
  
  if [ -z "$beSpecific" ] || [ $beSpecific != false ]
  then
    beSpecific=true
  fi

  if cpuHasBoostSupport "$processorId"
  then  
      
    if [ $beSpecific = true ]
    then
      
      boostState="`cpupower --cpu "$processorId" frequency-info | grep 'Active'`"
      boostState="`corgiFetchSubstringAfter "$boostState" ':' 'first'`"
      boostState="`corgiTrimWhiteSpace "$boostState"`"
            
      if [ "$boostState" = 'yes' ]
      then
        state='enabled'  
      else
        state='disabled'  
      fi
      
    else
      state='supported'    
    fi
    
  fi
  
  echo "$state"
  exit $?
  
}


# Sets the speed, in either MHz, or percentage of maximum available frequency,
# on processors with ids matching the provided ids.
#
# $1 - string, required, comma-delimited list of ids for processors on which the desired governor setting should be set
# $2 - string, optional, the speed setting option, determines whether the speed setting should be absolute (no range),
#      a minimum available speed (range minimum), or a maximum available speed (range maximum)
# $3 - number, required, the desired speed, in MHz, or percentage of maximum available frequency,
#      to be set on the processors
# $4 - true or false, optional, determines whether or not the provided speed should be treated as a
#      percentage of maximum available frequency - defaults to false
# $5 - string, optional, user message prefix, used for success and error status messages -
#      defaults to 'Processor'
setSpeedOnCpus() {
  
  response=''
  hasErrors=false
  successfulProcessorIds=''
  failedProcessorIds=''
  messageSuffix=''
  
  processorIds="$1"
  option="$2"
  desiredSpeed="$3"
  isPercentage=$4
  messagePrefix="$5"

  if [ "$option" != 'min' ] && [ "$option" != 'max' ] && [ "$option" != 'abs' ]
  then
    option='abs'
  fi
  
  if [ $isPercentage != true ]
  then
    isPercentage=false
  fi
  
  if [ -z "$messagePrefix" ]
  then
    messagePrefix='Processor'
  fi

  if corgiHasSubstring "$desiredSpeed" '.'
  then
    desiredSpeed="`corgiFetchSubstringBefore "$desiredSpeed" '.'`"  
  fi
  
  minAndMaxSpeeds="`getMinAndMaxFrequencies "$processorIds"`"
  minSpeed="`corgiFetchSubstringBefore "$minAndMaxSpeeds" "$dataDelimiter"`"
  maxSpeed="`corgiFetchSubstringAfter "$minAndMaxSpeeds" "$dataDelimiter"`"  
  
  activeMinAndMaxSpeeds="`getMinAndMaxFrequencies "$processorIds" true`"
  activeMinSpeed="`corgiFetchSubstringBefore "$activeMinAndMaxSpeeds" "$dataDelimiter"`"
  activeMaxSpeed="`corgiFetchSubstringAfter "$activeMinAndMaxSpeeds" "$dataDelimiter"`"

  if [ ! -z "$isPercentage" ] && [ $isPercentage = true ]
  then
  
    if [ $desiredSpeed -gt 0 ] && [ $desiredSpeed -le 100 ]
    then
      desiredSpeed="`corgiDeriveNumberFromPercentage $desiredSpeed $maxSpeed`"
    else
    	hasErrors=true
      messageSuffix="percentage $desiredSpeed is outside the range of 1 to 100"    
    fi  
    
  fi
  
  if [ $desiredSpeed -lt $minSpeed ] || [ $desiredSpeed -gt $maxSpeed ]
  then
  	hasErrors=true
    messageSuffix="frequency $desiredSpeed MHz is outside the range of $minSpeed MHz to $maxSpeed MHz"
  fi
  
  if corgiEndsWithSubstring "$processorIds" $dataDelimiter
  then
    processorIds="`corgiFetchSubstringBefore "$processorIds" $dataDelimiter`"
  fi
    
  cpuFrequencySetCommand="cpupower --cpu $processorIds frequency-set"
  cpuFrequency=$desiredSpeed"MHz"

  case "$option" in
    
    'abs') cpuFrequencySetCommand="$cpuFrequencySetCommand --min $cpuFrequency --max $cpuFrequency" ;;
    
    'min') 
    
      if [ $desiredSpeed -gt $activeMaxSpeed ]
      then
      	hasErrors=true
        messageSuffix="desired min frequency $desiredSpeed MHz is greater than the active max of $activeMaxSpeed MHz"
      else
      	cpuFrequencySetCommand="$cpuFrequencySetCommand --min $cpuFrequency"
      fi
    
    ;;  
    
    'max') 
    
      if [ $desiredSpeed -lt $activeMinSpeed ]
      then
      	hasErrors=true
        messageSuffix="desired max frequency $desiredSpeed MHz is less than the active min of $activeMaxSpeed MHz"
      else
      	cpuFrequencySetCommand="$cpuFrequencySetCommand --max $cpuFrequency"
      fi       
    
    ;;

  esac
  
  if [ $hasErrors = true ]
  then
    
    response=''

    if corgiHasSubstring "$processorIds" $dataDelimiter
    then
      response="$response"'s '"`corgiFetchSubstringBefore "$processorIds" $dataDelimiter`"
      response="$response and `corgiFetchSubstringAfter "$processorIds" $dataDelimiter`"
      response="`corgiReplaceAllOccurrencesOfSubstring "$response" $dataDelimiter "$dataDelimiter "`"
    fi

    response="Failed to set frequency, for $messagePrefix$response: $messageSuffix"
  	
    if [ $hasNotify = true ]
    then
      notify-send --urgency="critical" "$response"
    elif [ $hasZenity = true ]
    then
      zenity --error --title="Failure" --text="$response"
    fi 	
  	
    echo "ERROR (corgi-power-management-cpu.shlib): $response"
    logger "ERROR (corgi-power-management-cpu.shlib): $response"
    
    exit 1     
    
  fi

  $cpuFrequencySetCommand

  exit $?
  
}


# Sets the governor on processors with ids matching the provided ids.
#
# $1 - string, required, comma-delimited list of ids for processors on which the desired governor setting should be set
# $2 - string, required, the governor to be set on the processors
# $3 - string, optional, user message prefix, used for success and error status messages -
#      defaults to 'Processor'
setGovernorOnCpus() {

  processorIds="$1"
  desiredGovernor="$2"
  messagePrefix="$3"

  if [ -z "$messagePrefix" ]
  then
    messagePrefix='Processor'
  fi  

  governors="`cpupower --cpu "$processorIds" frequency-info | grep 'governors:'`"
  governors="`corgiFetchSubstringAfter "$governors" 'governors:'`$dataDelimiter"
  governors="`corgiTrimWhiteSpace "$governors"`"
  governors="`corgiReplaceAllOccurrencesOfSubstring "$governors" ' ' $dataDelimiter`"

  desiredGovernorMatchesAvailableGovernor=false

  while corgiHasSubstring "$governors" $dataDelimiter
  do
    
    governor="`corgiFetchSubstringBefore "$governors" $dataDelimiter 'first'`"
    governor="`corgiTrimWhiteSpace "$governor"`"

    if [ "$desiredGovernor" = "$governor" ]
    then
      desiredGovernorMatchesAvailableGovernor=true      
    fi
    
    governors="`corgiFetchSubstringAfter "$governors" $dataDelimiter 'first'`"
    
  done

  if corgiEndsWithSubstring "$processorIds" $dataDelimiter
  then
    processorIds="`corgiFetchSubstringBefore "$processorIds" $dataDelimiter`"
  fi 
  
  if [ $desiredGovernorMatchesAvailableGovernor = false ]
  then
  	
  	response=''

    if corgiHasSubstring "$processorIds" $dataDelimiter
    then
      response="$response"'s '"`corgiFetchSubstringBefore "$processorIds" $dataDelimiter`"
      response="$response and `corgiFetchSubstringAfter "$processorIds" $dataDelimiter`"
      response="`corgiReplaceAllOccurrencesOfSubstring "$response" $dataDelimiter "$dataDelimiter "`"
    fi

  	response="Failed to set governor, for $messagePrefix$response: \"$desiredGovernor\" is not an available option"
  	
    if [ $hasNotify = true ]
    then
      notify-send --urgency="critical" "$response"
    elif [ $hasZenity = true ]
    then
      zenity --error --title="Failure" --text="$response"
    fi 	
  	
    echo "ERROR (corgi-power-management-cpu.shlib): $response"
    logger "ERROR (corgi-power-management-cpu.shlib): $response"
    
    exit 1  

  fi
    
  cpupower --cpu $processorIds frequency-set --governor $desiredGovernor

  exit $?
  
}


# Sets the performance bias on processors with ids matching the provided ids.
#
# $1 - string, required, comma-delimited list of ids for processors on which the desired bias setting should be set
# $2 - number, required, the bias level to be set on the processors (normally, this should be a number ranging from 0 and 15)
# $3 - string, optional, user message prefix, used for success and error status messages -
#      defaults to 'Processor'
setPerfBiasOnCpus() {
  
  response=''
  hasErrors=false
  successfulProcessorIds=''
  failedProcessorIds=''
  
  processorIds="$1"
  desiredPerfBias=$2
  messagePrefix="$3"
  
  if [ -z "$messagePrefix" ]
  then
    messagePrefix='Processor'
  fi
  
  if [ $desiredPerfBias -lt 0 ] || [ $desiredPerfBias -gt 15 ]
  then
  	
   	response=''

    if corgiHasSubstring "$processorIds" $dataDelimiter
    then
      response="$response"'s '"`corgiFetchSubstringBefore "$processorIds" $dataDelimiter`"
      response="$response and `corgiFetchSubstringAfter "$processorIds" $dataDelimiter`"
      response="`corgiReplaceAllOccurrencesOfSubstring "$response" $dataDelimiter "$dataDelimiter "`"
    fi
  	
  	response="Failed to set performance bias, for $messagePrefix$response: $desiredPerfBias is outside the range of 0 to 15"
  	
    if [ $hasNotify = true ]
    then
      notify-send --urgency="critical" "$response"
    elif [ $hasZenity = true ]
    then
      zenity --error --title="Failure" --text="$response"
    fi  	
  	
    echo "ERROR (corgi-power-management-cpu.shlib): $response"
    logger "ERROR (corgi-power-management-cpu.shlib): $response"
    
    exit 1

  fi  
  
  if corgiEndsWithSubstring "$processorIds" $dataDelimiter
  then
    processorIds="`corgiFetchSubstringBefore "$processorIds" $dataDelimiter`"
  fi
    
  cpupower --cpu $processorIds set --perf-bias $desiredPerfBias

  exit $?
  
}
